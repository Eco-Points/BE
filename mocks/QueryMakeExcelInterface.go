// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueryMakeExcelInterface is an autogenerated mock type for the QueryMakeExcelInterface type
type QueryMakeExcelInterface struct {
	mock.Mock
}

// MakeExcelFromDeposit provides a mock function with given fields: table, date, userid, isVerif, limit
func (_m *QueryMakeExcelInterface) MakeExcelFromDeposit(table string, date string, userid uint, isVerif bool, limit uint) (string, string, error) {
	ret := _m.Called(table, date, userid, isVerif, limit)

	if len(ret) == 0 {
		panic("no return value specified for MakeExcelFromDeposit")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, uint, bool, uint) (string, string, error)); ok {
		return rf(table, date, userid, isVerif, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, uint, bool, uint) string); ok {
		r0 = rf(table, date, userid, isVerif, limit)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, uint, bool, uint) string); ok {
		r1 = rf(table, date, userid, isVerif, limit)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, uint, bool, uint) error); ok {
		r2 = rf(table, date, userid, isVerif, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetDbSchema provides a mock function with given fields: schema
func (_m *QueryMakeExcelInterface) SetDbSchema(schema string) {
	_m.Called(schema)
}

// NewQueryMakeExcelInterface creates a new instance of QueryMakeExcelInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryMakeExcelInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryMakeExcelInterface {
	mock := &QueryMakeExcelInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
