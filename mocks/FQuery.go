// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	feedbacks "eco_points/internal/features/feedbacks"

	mock "github.com/stretchr/testify/mock"
)

// FQuery is an autogenerated mock type for the FQuery type
type FQuery struct {
	mock.Mock
}

// AddFeedback provides a mock function with given fields: newFeedback
func (_m *FQuery) AddFeedback(newFeedback feedbacks.Feedback) error {
	ret := _m.Called(newFeedback)

	if len(ret) == 0 {
		panic("no return value specified for AddFeedback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(feedbacks.Feedback) error); ok {
		r0 = rf(newFeedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFeedback provides a mock function with given fields: feedbackID
func (_m *FQuery) DeleteFeedback(feedbackID uint) error {
	ret := _m.Called(feedbackID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeedback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(feedbackID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFeedbacks provides a mock function with given fields: limit, offset
func (_m *FQuery) GetAllFeedbacks(limit int, offset int) ([]feedbacks.Feedback, int, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFeedbacks")
	}

	var r0 []feedbacks.Feedback
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]feedbacks.Feedback, int, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []feedbacks.Feedback); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feedbacks.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFeedbackByID provides a mock function with given fields: feedbackID
func (_m *FQuery) GetFeedbackByID(feedbackID uint) (feedbacks.Feedback, error) {
	ret := _m.Called(feedbackID)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedbackByID")
	}

	var r0 feedbacks.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (feedbacks.Feedback, error)); ok {
		return rf(feedbackID)
	}
	if rf, ok := ret.Get(0).(func(uint) feedbacks.Feedback); ok {
		r0 = rf(feedbackID)
	} else {
		r0 = ret.Get(0).(feedbacks.Feedback)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(feedbackID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFeedback provides a mock function with given fields: feedbackID, updatedFeedback
func (_m *FQuery) UpdateFeedback(feedbackID uint, updatedFeedback feedbacks.Feedback) error {
	ret := _m.Called(feedbackID, updatedFeedback)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeedback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, feedbacks.Feedback) error); ok {
		r0 = rf(feedbackID, updatedFeedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFQuery creates a new instance of FQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *FQuery {
	mock := &FQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
