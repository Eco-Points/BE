// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	trashes "eco_points/internal/features/trashes"

	mock "github.com/stretchr/testify/mock"
)

// QueryTrashInterface is an autogenerated mock type for the QueryTrashInterface type
type QueryTrashInterface struct {
	mock.Mock
}

// AddTrash provides a mock function with given fields: tData
func (_m *QueryTrashInterface) AddTrash(tData trashes.TrashEntity) error {
	ret := _m.Called(tData)

	if len(ret) == 0 {
		panic("no return value specified for AddTrash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(trashes.TrashEntity) error); ok {
		r0 = rf(tData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTrash provides a mock function with given fields: id
func (_m *QueryTrashInterface) DeleteTrash(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTrashLimit provides a mock function with given fields:
func (_m *QueryTrashInterface) GetTrashLimit() (trashes.ListTrashEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTrashLimit")
	}

	var r0 trashes.ListTrashEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() (trashes.ListTrashEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() trashes.ListTrashEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trashes.ListTrashEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrashbyType provides a mock function with given fields: ttype
func (_m *QueryTrashInterface) GetTrashbyType(ttype string) (trashes.ListTrashEntity, error) {
	ret := _m.Called(ttype)

	if len(ret) == 0 {
		panic("no return value specified for GetTrashbyType")
	}

	var r0 trashes.ListTrashEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (trashes.ListTrashEntity, error)); ok {
		return rf(ttype)
	}
	if rf, ok := ret.Get(0).(func(string) trashes.ListTrashEntity); ok {
		r0 = rf(ttype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trashes.ListTrashEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ttype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrash provides a mock function with given fields: id, data
func (_m *QueryTrashInterface) UpdateTrash(id uint, data trashes.TrashEntity) error {
	ret := _m.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, trashes.TrashEntity) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueryTrashInterface creates a new instance of QueryTrashInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryTrashInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryTrashInterface {
	mock := &QueryTrashInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
