// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dashboards "eco_points/internal/features/dashboards"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetAllUsers provides a mock function with given fields: userID, nameParams
func (_m *Service) GetAllUsers(userID uint, nameParams string) ([]dashboards.User, error) {
	ret := _m.Called(userID, nameParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []dashboards.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) ([]dashboards.User, error)); ok {
		return rf(userID, nameParams)
	}
	if rf, ok := ret.Get(0).(func(uint, string) []dashboards.User); ok {
		r0 = rf(userID, nameParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dashboards.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, nameParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboard provides a mock function with given fields: userID
func (_m *Service) GetDashboard(userID uint) (dashboards.Dashboard, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboard")
	}

	var r0 dashboards.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (dashboards.Dashboard, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) dashboards.Dashboard); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(dashboards.Dashboard)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
